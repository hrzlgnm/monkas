name: CI

on:
  push:
    paths-ignore:
      - ".github/docker/**/*"
      - ".github/workflows/docker-build.yaml"
    branches: [main]
  pull_request:
    paths-ignore:
      - ".github/docker/**/*"
      - ".github/workflows/docker-build.yaml"
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  Lint:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/hrzlgnm/monkas-github-gcc:v1@sha256:d534a161e0545e4e8d63349e9dc445d26910a8b32afe3b4096ef667fae0a1746
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Check clang-format
        if: always()
        run: |
          find . -regex '.*\.\(cpp\|hpp\)' -exec clang-format --dry-run --Werror {} +

      - name: Check spelling using typos-action
        if: always()
        uses: crate-ci/typos@85f62a8a84f939ae994ab3763f01a0296d61a7ee # v1.36.2

      - name: Gersemi --check --diff
        if: always()
        run: |
          gersemi --check --diff .

  Non-Default-Build-Config:
    runs-on: ubuntu-latest
    env:
      SCCACHE_GHA_ENABLED: true
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
    container:
      image: ghcr.io/hrzlgnm/monkas-github-gcc:v1@sha256:d534a161e0545e4e8d63349e9dc445d26910a8b32afe3b4096ef667fae0a1746
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Run sccache-action
        uses: mozilla-actions/sccache-action@4097539ece2ebbb6fd759bb45e5f0321071ac87d

      - name: Configure
        run: cmake -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -S . -B ../build

      - name: Build
        run: cmake --build ../build

  Build-And-Test:
    name: ${{ matrix.toolchain.name }}
    permissions:
      pull-requests: write # retain for PR operations
      checks: write # required for action-junit-report annotations
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - {
              runs_on: ubuntu-latest,
              name: Clang libstdc++,
              CC: clang,
              CXX: clang++,
              CFLAGS: -stdlib=libstdc++,
              CMAKE_BUILD_TYPE: Debug,
              CMAKE_FLAGS: -G Ninja,
              sccache: sccache,
            }
          - {
              runs_on: ubuntu-latest,
              name: Clang ASAN+UBSAN libstdc++,
              CC: clang,
              CXX: clang++,
              CFLAGS: "-fsanitize=address,undefined -fsanitize-address-use-after-scope -fno-sanitize-recover=address,undefined -stdlib=libstdc++",
              CMAKE_BUILD_TYPE: Debug,
              ASAN_OPTIONS: strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1,
              CMAKE_FLAGS: -G Ninja,
              sccache: sccache,
            }
          - {
              runs_on: ubuntu-latest,
              name: Clang libstdc++ Release,
              CC: clang,
              CXX: clang++,
              CFLAGS: -stdlib=libstdc++,
              CMAKE_BUILD_TYPE: Release,
              CMAKE_FLAGS: -G Ninja,
              sccache: sccache,
            }
          - {
              runs_on: ubuntu-latest,
              name: GCC,
              CC: gcc,
              CXX: g++,
              CFLAGS: "",
              CMAKE_BUILD_TYPE: Debug,
              CMAKE_FLAGS: -G Ninja,
              sccache: sccache,
            }
          - {
              runs_on: ubuntu-latest,
              name: GCC ASAN+UBSAN,
              CC: gcc,
              CXX: g++,
              CFLAGS: "-fsanitize=address,undefined -fsanitize-address-use-after-scope -fno-sanitize-recover=address,undefined",
              CMAKE_BUILD_TYPE: Debug,
              CMAKE_FLAGS: -G Ninja,
              ASAN_OPTIONS: strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1,
              sccache: sccache,
            }
          - {
              runs_on: ubuntu-latest,
              name: GCC Release,
              CC: gcc,
              CXX: g++,
              CFLAGS: "",
              CMAKE_BUILD_TYPE: Release,
              CMAKE_FLAGS: -G Ninja,
              sccache: sccache,
            }
    runs-on: ${{ matrix.toolchain.runs_on }}
    container:
      image: ghcr.io/hrzlgnm/monkas-github-gcc:v1@sha256:d534a161e0545e4e8d63349e9dc445d26910a8b32afe3b4096ef667fae0a1746
    env:
      ASAN_OPTIONS: ${{ matrix.toolchain.ASAN_OPTIONS }}
      CMAKE_BUILD_TYPE: ${{ matrix.toolchain.CMAKE_BUILD_TYPE }}
      CMAKE_C_COMPILER: ${{ matrix.toolchain.CC }}
      CMAKE_C_FLAGS: ${{ matrix.toolchain.CFLAGS }}
      CMAKE_CXX_COMPILER: ${{ matrix.toolchain.CXX }}
      CMAKE_CXX_FLAGS: ${{ matrix.toolchain.CFLAGS }}
      CMAKE_EXE_LINKER_FLAGS: ${{ matrix.toolchain.CFLAGS }}
      CMAKE_EXTRA_FLAGS: ${{ matrix.toolchain.CMAKE_FLAGS }}
      CMAKE_SHARED_LINKER_FLAGS: ${{ matrix.toolchain.CFLAGS }}
      CMAKE_C_COMPILER_LAUNCHER: ${{ matrix.toolchain.sccache }}
      CMAKE_CXX_COMPILER_LAUNCHER: ${{ matrix.toolchain.sccache }}
      SCCACHE_GHA_ENABLED: true

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Run sccache-action
        if: ${{ matrix.toolchain.sccache }}
        uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

      - name: Configure
        run: |
          env | grep '^ASAN_OPTIONS\|^CMAKE' | sort
          cmake -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" ${CMAKE_C_COMPILER+-DCMAKE_C_COMPILER="${CMAKE_C_COMPILER}"} ${CMAKE_CXX_COMPILER+-DCMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER}"} -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS}" -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS}" -DCMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS}" -DCMAKE_SHARED_LINKER_FLAGS="${CMAKE_SHARED_LINKER_FLAGS}" ${CMAKE_EXTRA_FLAGS} -S . -B ./build
        shell: bash

      - name: Build
        run: cmake --build ./build --config ${{matrix.toolchain.CMAKE_BUILD_TYPE}}

      - name: Test
        working-directory: ./build
        run: ctest --verbose --build-config ${{matrix.toolchain.CMAKE_BUILD_TYPE}}

      - name: CLI example help
        run: |
          ./build/examples/cli/monka --help || true

      - name: CLI example nerdstats/dumppackets
        run: |
          ./build/examples/cli/monka --log-level=trace --nerdstats --dumppackets --include-non-ieee802 --exit-after-enumeration

      - name: JUnit Report
        if: always()
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5
        with:
          report_paths: "**/junit.xml"
          fail_on_parse_error: true
          require_tests: true
          include_passed: true
          check_name: "${{ matrix.toolchain.name }} JUnit Report"
